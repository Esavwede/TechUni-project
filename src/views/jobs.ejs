<%- include("partials/primary_header"); -%>

<title>TechUni : Jobs</title>

<h1 class="font-bold text-violet-800 text-center text-3xl my-12">APPLY TO JOBS</h1>


<ul id="jobs-container" class="mx-auto my-12 flex list-none flex-col items-center justify-between align-middle gap-8 lg:flex-row lg:text-2xl sm:text-base">

</ul>


<style>

  #navigation-buttons-container 
  {
    width: auto;
    height: auto; 
    padding: 5px; 
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #back-navigation-button 
  {
      width: auto;
      height: auto;
      color: blue; 
  }

  #next-navigation-button 
  {
    width: auto;
      height: auto;
      color: blue; 
  }

  
</style>

<!-- Create Job Element and Add to Jobs List -->
<script>

window.alert(' Up and running ') 

var fetchedJobs = [] 
var currentJobsSetIndex = 0 
var jobsInPageLimit = 2

      function createListItem(){
        try {
          const listItem = document.createElement('li');
          listItem.classList.add(
            'flex',
            'mx-3',
            'w-full',
            'flex-col',
            'items-start',
            'py-6',
            'px-4',
            'shadow-xl',
            'sm:mx-auto',
            'bg-papayawhip-light',
            'text-violet-800',
            'sm:w-1/2',
            'sm:text-base'
          );
          return listItem;
        } catch (e) {
          console.log('Error occurred while creating Jobs List Item ');
          console.log(e);
        }
      }

      function createListItemHeader(headerText) {
        try {
          const heading = document.createElement('h1');
          heading.classList.add('text-2xl', 'my-3');
          heading.innerHTML = 'Title' + headerText;
          return heading;
        } catch (e) {
          console.log('Error occurred while creating list item header ');
          console.log(e);
        }
      }
    
      function createJobRoleElement(jobRoleText) {
        try {
          const jobRole = document.createElement('p');
          jobRole.classList.add('my-2');
          jobRole.innerText = 'Role' + jobRoleText;
          return jobRole;
        } catch (e) {
          console.log('Error occurred while creating Job role Element ');
          console.log(e);
        }
      }

      function createJobLocationElement(jobLocationText) {
        try {
          const jobLocationElement = document.createElement('p');
          jobLocationElement.classList.add('my-2');
          jobLocationElement.innerText = 'Location' +  jobLocationText;
          return jobLocationElement;
        } catch (e) {
          console.log('Error occurred while creating Job Location Element ');
          console.log(e);
        }
      }

      function createJobSalaryElement(jobSalaryText) {
        try {
          const jobSalaryElement = document.createElement('p');
          jobSalaryElement.classList.add('my-2');
          jobSalaryElement.innerText = 'Salary' + jobSalaryText;
          return jobSalaryElement;
        } catch (e) {
          console.log('Error occurred while creating job salary Element ');
          console.log(e);
        }
      }

      function createJobLinkElement(job_link) {
        try {
          const jobLinkParagraph = document.createElement('p');
          jobLinkParagraph.classList.add('my-2');
    
          const jobLink = document.createElement('a');
          jobLink.classList.add('my-2');
          jobLink.classList.add('job-link-style')
          jobLink.href = job_link;
          jobLink.target = '_blank';
          jobLink.innerText = 'Apply';
    
          jobLinkParagraph.appendChild(jobLink);
          return jobLinkParagraph;
        } catch (e) {
          console.log('Error occurred while creating Job Link Element ');
          console.log(e);
        }
      }
    
      function createJobContentElement(jobPostText) {
        try {
          const jobContentElement = document.createElement('p');
          jobContentElement.classList.add('my-2');
          jobContentElement.innerText = 'Description: ' + jobPostText;
          return jobContentElement;
        } catch (e) {
          console.log('Error occurred while creating job content ');
          console.log(e);
        }
      }

      function createReadMoreButton(job_id) {
        try {
          const readMoreButton = document.createElement('a');
          readMoreButton.classList.add(
            'w-full',
            'sm:w-1/2',
            'text-center',
            'rounded-xl',
            'p-3',
            'my-3',
            'bg-violet-800',
            'text-white'
          );
          
      readMoreButton.href = `/job/${job_id}`;
      readMoreButton.innerText = 'Read More';

      return readMoreButton;
    } catch (e) {
      console.log('Error occurred while creating Read More Button ');
      console.log(e);
    }
  }

      function createJobElement(job) {
    try {
      const jobElement = createListItem();
      const jobTitle = createListItemHeader(job.title);
      const jobRole = createJobRoleElement(job.role);
      const jobLocation = createJobLocationElement(job.location);
      const jobSalary = createJobSalaryElement(job.salary);
      const jobLink = createJobLinkElement(job.link);
      const jobContent = createJobContentElement(job.content);
      const jobReadMoreButton = createReadMoreButton(job._id);

      jobElement.appendChild(jobTitle);
      jobElement.appendChild(jobRole);
      jobElement.appendChild(jobLocation);
      jobElement.appendChild(jobSalary);
      jobElement.appendChild(jobLink);
      jobElement.appendChild(jobContent);
      jobElement.appendChild(jobReadMoreButton);

      return jobElement;
    } catch (e) {
      console.log('ERROR OCCURRED WHILE CREATING JOB ELEMENT ');
      console.log(e);
    }
  }

      function addJobElementToJobsDisplay(job) {
        try {
          const jobsContainer = document.getElementById('jobs-container');
          jobsContainer.appendChild(job);
        } catch (e) {
          console.log('ERROR OCCURRED WHILE ADDING JOBS ELEMENT TO JOBS DISPLAY');
          console.log(e);
        }
      }

      function extractJobData(job)
      {
        console.log(' Extracting Job Data ')
        const _content = job.content.substring(0, 100) + " ..."
        return { title: job.title, role: job.role, location: job.location, salary: job.salary, link: job.link, content: _content, _id: job._id }
      }


function addJobsToDisplay(jobs)
{
  try 
  {

    var jobData 
    console.log(' Adding Jobs To Display ')
    console.log( jobs ) 
    console.log( jobs.length ) 

    for( var i = 0; i < jobs.length; i++ )
      { 
       
            console.log( 'here ' + jobs[i] ) 
            jobData = extractJobData( jobs[i] ) 
            console.log( jobData ) 

            var newJob = createJobElement( jobData )
            addJobElementToJobsDisplay( newJob )
      }

      
  }
  catch(e)
  {
    console.log(' Error occured while adding jobs to display ') 
    console.log(e) 
  }
}

function backNavigationButtonClickHandler()
{
    try 
    {
        const prevSkipNumber = window.localStorage.getItem('skip') 
        var newSkipNumber = prevSkipNumber - jobsInPageLimit 
        var currentSkipNumber = null 

        if(  newSkipNumber  < 0 )
        {
            currentSkipNumber = 0 
            return 
        }
            currentSkipNumber = prevSkipNumber - jobsInPageLimit 

            var prevJobsSetIndex = currentJobsSetIndex - 1 

       cleanJobs() 

       addJobsToDisplay( fetchedJobs[prevJobsSetIndex] ) 

       appendNavigation() 

    }
    catch(e)
    {
      console.log(' Error occured while handling back navigation click ') 
    }
}


function cleanJobs()
{
  try 
  {
      const jobsContainer = document.getElementById('jobs-container') 
      jobsContainer.innerHTML = null
      
  }
  catch(e)
  {
    console.log(' Error occured while cleaning Jobs') 
    console.log(e) 
  }
}


function removeNavigation()
{
  const jobsContainer = document.getElementById('jobs-container')
  const jobsNavigationContainer = document.getElementById('jobs-navigation-container') 
  jobsContainer.removeChild( jobsNavigationContainer )
}


function nextNavigationButtonClickHandler()
{
    try 
    {
        const prevSkipNumber = window.localStorage.getItem('skip') 
        var currentSkipNumber = prevSkipNumber + jobsInPageLimit 
       
        var nextSetIndex = currentJobsSetIndex + 1 

        var nextSetAlreadyLoaded = fetchedJobs[nextSetIndex] 

        if( nextSetAlreadyLoaded )
        {
          cleanJobs() 
          addJobsToDisplay( fetchedJobs[nextSetIndex] ) 
          appendNavigation() 
        }
        else 
        {
          cleanJobs() 

            fetch(`http://localhost:3000/jobs/${currentSkipNumber}/${jobsInPageLimit}`)
            .then(data => {
            return data.json()
            })
            .then(data => {

              // set initial page 
              window.localStorage.setItem('skip', currentSkipNumber ) 
              window.localStorage.setItem('limit', jobsInPageLimit )

              const posts = data.posts 
              fetchedJobs.push( posts ) 
              currentJobsSetIndex = currentJobsSetIndex + 1 
              addJobsToDisplay( posts ) 

              appendNavigation() 
            });
        }

    
              
    }
    catch(e)
    {
      console.log(' Error occured while handling back navigation click ') 
    }
}


function appendNavigation()
{
  try 
  {

      const navigationButtonsContainer = document.createElement('div')
      navigationButtonsContainer.id = 'navigation-buttons-container' 

      const backButton = document.createElement('button') 
      backButton.id = 'back-navigation-button' 
      backButton.innerText = 'Back'
      backButton.addEventListener('click', backNavigationButtonClickHandler, false )

      const nextButton = document.createElement('button') 
      nextButton.id = 'next-navigation-button' 
      nextButton.innerText = 'Next' 
      nextButton.addEventListener('click', nextNavigationButtonClickHandler, false)

      navigationButtonsContainer.appendChild( backButton )
      navigationButtonsContainer.appendChild( nextButton ) 


      const jobsContainer = document.getElementById('jobs-container')
      jobsContainer.appendChild( navigationButtonsContainer ) 


  }
  catch(e)
  {
    console.log(' Error occured while appending navigation buttons ')
    console.log(e) 
  }
}


    fetch(`http://localhost:3000/jobs/0/${jobsInPageLimit}`)
    .then(data => {
    return data.json()
    })
    .then(data => {

      // set initial page 
      window.localStorage.setItem('skip', 0 ) 
      window.localStorage.setItem('limit', jobsInPageLimit )

       const posts = data.posts 
       fetchedJobs.push( posts ) 
       currentJobsSetIndex = 0 
       addJobsToDisplay( posts ) 

       appendNavigation() 
    });


</script>





